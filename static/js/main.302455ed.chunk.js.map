{"version":3,"sources":["components/header/header.jsx","components/SearchBox/SearchBox.jsx","components/NameCard/NameCard.jsx","components/ResultsContainer/ResultsContainer.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["Header","props","className","src","headerExpanded","alt","headTitle","SearchBox","onInputChange","onChange","event","target","value","type","placeholder","NameCard","suggestedName","rel","href","ResultsContainer","suggestedNameJsx","suggestedNames","map","name","require","App","state","headerText","handleInputChange","inputText","setState","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAyCeA,EAvCD,SAACC,GAEX,OACI,sBAAKC,UAAU,iBAAf,UAMI,qBACIC,IAAI,wGACJD,UAEID,EAAMG,eACJ,iCACA,mCAaNC,IAAI,iBAER,oBAAIH,UACID,EAAMG,eACJ,+BACA,iCAHV,SAIOH,EAAMK,gBCjBVC,G,YAjBG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAChB,OACI,qBAAKN,UAAU,mBAAf,SACI,uBAAOO,SAAU,SAACC,GACdF,EAAcE,EAAMC,OAAOC,QAG/BC,KAAK,OACLC,YAAY,gBAAgBZ,UAAU,qBCQnCa,G,YAdE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cACf,OACI,mBACAL,OAAO,SACPM,IAAI,aACJf,UAAU,YAAYgB,KAAI,UANf,mEAMe,OAAoBF,GAH9C,SAIA,qBAAKd,UAAU,mBAAf,SACA,mBAAGA,UAAU,cAAb,SAA4Bc,UCKrBG,EAZU,SAAC,GAAqB,IACrCC,EADoC,EAAnBC,eACeC,KAAI,SAACN,GACvC,OAAO,cAAC,EAAD,CAA8BA,cAAeA,GAA9BA,MAE1B,OACI,qBAAKd,UAAU,oBAAf,SAEKkB,KCIPG,EAAKC,EAAQ,IA2EJC,E,4MAtEXC,MAAM,CACFC,WAAY,WACZvB,gBAAgB,EAChBiB,eAAe,I,EASnBO,kBAAoB,SAACC,GAMjB,EAAKC,SAAS,CAMV1B,gBAAkByB,EAClBR,eAAiBE,EAAKM,M,4CAI9B,WAEI,OA4BI,cA3BA,CA2BA,iBACI,cAAC,EAAD,CAAQzB,eAAgB2B,KAAKL,MAAMtB,eAAgBE,UAAWyB,KAAKL,MAAMC,aAEzE,cAAC,EAAD,CAAWnB,cAAeuB,KAAKH,oBAG/B,cAAC,EAAD,CAAkBP,eAAgBU,KAAKL,MAAML,wB,GAlE3CW,IAAMC,WCPTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.302455ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\nconst Header =(props)=>{ //instead of props we can directly take value of headTitle and \r\n    // there is no need to use props. every time then\r\n    return(\r\n        <div className=\"head-container\">\r\n            {/* in the image tag we have to dynamically change the value of \r\n            class from expanded to contracted based user is typing the text in searchbox or not \r\n            so as we know state is used to store the data which can be used in future or \r\n            for any logical operations  \r\n             */}\r\n            <img \r\n                src=\"https://user-images.githubusercontent.com/26179770/106359099-693e3380-6336-11eb-8069-9e36f25de5ca.png\"\r\n                className=\r\n                { \r\n                    props.headerExpanded \r\n                    ? \"head-image head-image-expanded\"\r\n                    : \"head-image head-image-contracted\"\r\n                }\r\n                // above expression can be little bit chnage using \r\n                // template literal which allows us to use expression inside string \r\n                // className={ 'head-image ${\r\n                //         headerExpanded\r\n                //         ? 'head-image-expanded'\r\n                //         : 'head-image-contracted'\r\n                //     }'\r\n                // }\r\n                // above code is not working may be some syntax in not detected because of version of JS \r\n                \r\n\r\n                alt=\"header image\"\r\n                />\r\n            <h1 className={ \r\n                    props.headerExpanded \r\n                    ? \"head-text head-text-expanded\"\r\n                    : \"head-text head-text-contracted\"\r\n                }>{props.headTitle}</h1>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default Header;","import React from 'react';\r\nimport './SearchBox.css';\r\nconst SearchBox = ({onInputChange}) =>{\r\n    return(\r\n        <div className=\"search-container\">\r\n            <input onChange={(event)=>{\r\n                onInputChange(event.target.value) //passing value to function in parent component \r\n                //console.log(event.target.value)\r\n            }} \r\n            type=\"text\" \r\n            placeholder=\"Type Keywords\" className=\"search-input\" \r\n            />\r\n        </div>\r\n        // parent to child communication props \r\n        // child to parent communication callback method \r\n\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './NameCard.css';\r\n\r\nconst nameCheapUrl='https://www.namecheap.com/domains/registration/results/?domain=';\r\nconst NameCard = ({suggestedName}) =>{\r\n    return(\r\n        <a \r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n        className=\"card-link\" href={`${nameCheapUrl}${suggestedName}`}>\r\n        <div className=\"result-name-card\">\r\n        <p className=\"result-name\">{suggestedName}</p>\r\n        </div>\r\n        </a>\r\n    );\r\n   \r\n};\r\n\r\nexport default NameCard;","import React from 'react';\r\nimport './ResultsContainer.css';\r\nimport NameCard from \"../NameCard/NameCard\";\r\n \r\nconst ResultsContainer = ({suggestedNames}) =>{\r\n    const suggestedNameJsx=suggestedNames.map((suggestedName)=>{\r\n        return <NameCard key={suggestedName} suggestedName={suggestedName}/>;\r\n    });\r\n    return(\r\n        <div className=\"results-container\">\r\n            {/* <p>{suggestedNames.length>0 ? suggestedNames[0] : null }</p> */}\r\n            {suggestedNameJsx}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsContainer;","// function component are implemented using functions & class components are built using class\r\n// function component \r\n// import React from 'react';\r\n// function App(){\r\n//     return <h1>This is my functional component</h1>\r\n// }\r\n// export default App;\r\n\r\n// class component \r\nimport React from 'react';\r\nimport Header from './header/header.jsx'\r\nimport './App.css';\r\nimport SearchBox from './SearchBox/SearchBox';\r\nimport ResultsContainer from './ResultsContainer/ResultsContainer';\r\n\r\nconst name=require('@rstacruz/startup-name-generator');\r\n// date is stored in JS objects which stores data in \r\n// the form of key valur pairs \r\n// state can be called as variable in JS\r\nclass App extends React.Component{\r\n    state={\r\n        headerText: 'Name It!',\r\n        headerExpanded: true,\r\n        suggestedNames:[],\r\n    };\r\n    // older way to intialize object \r\n    // constructor(){\r\n    //     super();\r\n    //     this.state={\r\n    //         headerText:'Name It!',\r\n    //     };\r\n    // }\r\n    handleInputChange = (inputText)=>{\r\n        // if you try to save state inside a normal function in the react component\r\n        // we will face lot of issues that's why we are using arrow functions \r\n        // inside the class component because this keyword is not bound here \r\n        // alert(\"I am called\");\r\n        // console.log(\"input text is \"+inputText);\r\n        this.setState({\r\n            // headerExpanded: inputText.length>0 ? false : true\r\n            // above statement can also be written as \r\n            // headerExpanded: !(inputText.length>0) because it just toggles a value\r\n            // when we have to check wether string is empty or not in JS no need to use\r\n            // length also the string name itself acts as boolean'\r\n            headerExpanded: !(inputText),\r\n            suggestedNames : name(inputText),\r\n            // above expression works fine \r\n        });\r\n    }\r\n    render(){\r\n        \r\n        return (\r\n            // <div>\r\n            //     <Header/>\r\n            //     <h3>{this.state.headerText}</h3>\r\n            //     to access value of state\r\n            //     <button\r\n            //         onClick={()=>{\r\n            //             // this.state.headerText=\"Magic happend?\"\r\n            //             // just updating the state manually does not trigger \r\n            //             // rerender \r\n            //             // so we have to use setstate method \r\n\r\n\r\n            //             // console.log(this.state.headerText);\r\n            //             this.setState({\r\n            //                 headerText:\"Magic happend?\", //state is getting updated\r\n            //             });\r\n            //         }}\r\n            //         >\r\n            //         Magic Happens here\r\n            //     </button>\r\n            //     set contains data which can chnage at any point \r\n            //     of time , state is used to store the data which cane be used \r\n            //     in future\r\n\r\n            //     props are used to transfer data from parent component \r\n            //     to child component \r\n            // </div>\r\n            <div>\r\n                <Header headerExpanded={this.state.headerExpanded} headTitle={this.state.headerText}/> \r\n                {/* passing data as props  */}\r\n                <SearchBox onInputChange={this.handleInputChange}\r\n                />\r\n                {/* passing function as props  */}\r\n                <ResultsContainer suggestedNames={this.state.suggestedNames}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}